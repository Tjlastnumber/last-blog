---
title: docker swarm 部署 prometheus 监控
author: lastnumber
date: 2024-04-08
categories:
  - news
  - monitoring
  - prometheus
  - docker swarm
image: docker_swarm.png
description: 使用 prometheus 同时监控 docker swarm 集群的多个 stock
---

# docker swarm 使用 prometheus 监控集群状态

由于不能从外部访问 docker swarm 的 overlay 网络，prometheus 无法在外部访问应用端口，所以需要将 prometheus 部署对应的 stack 环境并加入到 ingress 网络，这样就能在内部通过 vip 或者 service name 访问容器

## 打开 docker 采集端口

1. 修改 `/etc/docker/daemon.json` 添加配置：

```json
{
  "metrics-addr": "0.0.0.0:9323",
  "experimental": true
}
```

也可以配置 ip 地址而不是 `0.0.0.0`

2. 重启 docker 守护进程

```bash
$ systemctl restart docker
```

::: {.callout-warning appearance="simple"}

## 注意 

- 需要集群中所有 docker 打开 9323 端口
- 需要打开服务器防火墙

:::

## 在 docker swarm 创建 configs

在当前目录创建 prometheus.yml 文件:

```yaml
# my global config
global:
  scrape_interval: 1m # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 1m # Evaluate rules every 15 seconds. The default is every 1 minute.
  scrape_timeout: 10s # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093
          
scrape_configs:
  - job_name: "dockerswarm"
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: nodes
    relabel_configs:
      - source_labels: [__meta_dockerswarm_node_address]
        target_label: __address__
        replacement: $1:9323
      - source_labels: [__meta_dockerswarm_node_hostname]
        target_label: instance

  - job_name: 'dockertasks'
    metrics_path: /actuator/prometheus
    dockerswarm_sd_configs:
      - host: unix:///var/run/docker.sock
        role: tasks
    relabel_configs:
      # Only keep containers that should be running.
      - source_labels: [__meta_dockerswarm_task_desired_state]
        regex: running
        action: keep
      - source_labels: [__meta_dockerswarm_container_label_com_docker_stack_namespace]
        regex: dev
        action: keep
      - source_labels: [__meta_dockerswarm_container_label_external_metrics_enable]
        regex: true
        action: keep
      - source_labels: [__address__]
        target_label: __address__
        regex: '(.+):.*'
        replacement: $1:8080
      - source_labels: [__meta_dockerswarm_service_label_com_docker_stack_namespace]
        target_label: namespace
      - source_labels: [__meta_dockerswarm_service_name]
        target_label: serviceName
      - source_labels: [__meta_dockerswarm_service_name]
        target_label: application
      - source_labels: [__meta_dockerswarm_task_id]
        target_label: instance
```

配置说明

- `job_name:"dockerswarm"`: docker swarm 节点监控
	- `dockerswarm_sd_configs`: 使用 `prometheus` 内置支持的 `dockerswarm` 服务发现配置
		- `host`: 配置 `unix:///var/run/docker.sock` 访问 docker 的守护进程
		- `role`: 配置为 `node` 用于访问表示监控 `docker swarm` 节点
	- `__meta_dockerswarm_node_address`: 使用 docker swarm 节点地址替换 `__address` label
	- `__meta_dockerswarm_node_hostname`: 使用 docker swarm hostname 替换 `instance` label
- `job_name: 'dockertasks'`: docker task 监控, 监控容器
	- `dockerswarm_sd_configs`: 同样使用 docker swarm 服务发现配置
		- `host`: 配置 `unix:///var/run/docker.sock` 访问 docker 的守护进程
		- `role`: 配置为 `tasks` 用于访问表示监控 `docker swarm` 运行的容器
	- `__meta_dockerswarm_task_desired_state`: 过滤容器运行状态要保持容器状态微 `running`
	- `__meta_dockerswarm_container_label_com_docker_stack_namespace`: 容器运行的命名空间, 对应的是 docker swarm 中的 `stock` , `namespace` 是 `k8s` 中不同环境之间隔离的划分名称, 这里过滤掉 `stock` 非 `dev` 
	- `__meta_dockerswarm_container_label_external_metrics_enable`: 过滤开启了监控的容器
	- `__address__`: 替换默认监控容器的端口, 我习惯上使用容器内的 `8080` 端口作为服务的默认访问端口, 可以根据跟人习惯修改
	- `__meta_dockerswarm_service_label_com_docker_stack_namespace`: 使用 `stack` 替换 `namespace`
	- `__meta_dockerswarm_service_name`: 使用`docker swarm`的服务名称替换掉 `application` 和 `serviceName` label
	- `__meta_dockerswarm_task_id`: 使用 `task_id` 替换掉 `instance`

## docker_compose.yml 配置

```yaml
version: "3.5"

services:
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    user: root
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    networks:
      - overlay
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

configs:
  prometheus_config:
    file: ./prometheus.yml

networks:
  overlay:
```

- `user：root`: 使用 root 用户创建容器，因为需要监听 `docker.sock`
- 挂载 `/var/run/docker.sock` 监控 docker swarm 集群情况
- 挂载配置使用当前目录的配置文件创建 `docker config`
- `- node.role == manager`: 将容器部署到 manager 节点
- 加入到 overlay 网络
- 启动时挂载刚刚创建的 `prometheus.yml` 文件到 `docker config`

## 在 docker swarm 集群部署

在目标 stack 环境部署 prometheus

```shell
$ docker stack deploy -c docker_compose.yml {stack}
```

::: {.callout-warning appearance="simple"}

## 注意

如果是多套 `stock` 环境则必须每个 `stock` 中都要部署 prometheus 用于监控, 这是因为 docker swarm 默认的 overlay 网络之间不能互相通信. 同时每个容器只能配置唯一的 overlay 网络

:::

